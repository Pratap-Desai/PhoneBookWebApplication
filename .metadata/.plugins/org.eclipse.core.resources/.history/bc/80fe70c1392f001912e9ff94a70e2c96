package com.tplink.pbook.dao;

import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import org.json.JSONArray;
import org.json.JSONObject;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import com.tplink.pbook.bean.ContactBean;
import com.tplink.pbook.util.DbConnectionUtil;


/**
 * <h1>Phone Book!</h1>
 * <h3>class Contacts Dao Impl</h3>
 * The Data Access Object  class with implementations for adding and viewing Contacts.
 * @author Pratap
 *
 */
public class ContactsDaoImpl implements ContactsDao{
	private Connection con;

	public ContactsDaoImpl() {
		
		con=DbConnectionUtil.getDBConnection();
		
	}

	public boolean addANewContact(ContactBean contactBean) {
		PreparedStatement ps;
		
		try {
			contactBean.setContactId(generateContactId());
			if(contactBean.getConDob()!=null) {
				contactBean.setContactDob(dateToSql(contactBean.getConDob()));
				System.out.println(contactBean.getConDob());
				System.out.println(contactBean.getContactDob().toString());
				
			}
				//userBean.setUserId(generateUserId());
				//userBean.setVarificationCode(generateVerificationCode());
				System.out.println(contactBean.getContactId());
				//System.out.println(userBean.getVarificationCode());
				ps = (PreparedStatement) con.prepareStatement("INSERT INTO pbook_contacts_table VALUES (?,?,?,?,?,?,?,?)");
				ps.setString(1, contactBean.getContactId());
				ps.setString(2, contactBean.getNumPrimary());
				ps.setString(3, contactBean.getNumSecondary());
				ps.setString(4, contactBean.getNumAdditional());
				ps.setString(5, contactBean.getConEmail());
				ps.setDate(6, contactBean.getContactDob());;
				ps.setString(7, contactBean.getUserId());
				ps.setString(8, contactBean.getConName());
				int rs1=ps.executeUpdate();
				return true;
			
		} catch (SQLException e) {
			System.out.println("exception"+e.getStackTrace());
			return false;
			
		}
			
	}
	
	
	
	public boolean deletePerticularContact(String contactId) {
		PreparedStatement ps;
		
		try {
			
				ps = (PreparedStatement) con.prepareStatement("DELETE FROM pbook_contacts_table WHERE (contact_id=?)");
				ps.setString(1, contactId);
				int rs1=ps.executeUpdate();
				return true;
			
		} catch (SQLException e) {
			System.out.println("exception"+e.getStackTrace());
			return false;
			
		}
			
	}
	
	public	JSONArray allUserContacts(String userId) {
		System.out.println("in allUserContacts");
		PreparedStatement ps;
		JSONObject contactObj; 
		 JSONArray contactArray = new JSONArray(); 
		 
			try {
				ps = (PreparedStatement) con.prepareStatement("SELECT * from pbook_contacts_table where user_Id=?");
				ps.setString(1, userId);
				ResultSet rs=ps.executeQuery();
				while(rs.next()){
					contactObj = new JSONObject(); 
					 contactObj.put("contact_id",rs.getString(1)); 
					 contactObj.put("contact_name",rs.getString(8));
					 contactObj.put("ph_num_primary",rs.getString(2));
					 contactObj.put("ph_num_secondary", rs.getString(3)); 
					 contactObj.put("ph_num_additional", rs.getString(4));
					 contactObj.put("contact_email", rs.getString(5));
					 String val=sqlDateToStr(rs.getDate(6));
					 contactObj.put("contact_dob", val);
					 System.out.println("inside rs date= "+val);
					 contactArray.put(contactObj);
				
				}
			} catch (SQLException e) {
				contactObj = new JSONObject(); 
				contactObj.put("ERROR","ERROR");
				contactArray.put(contactObj);
				e.printStackTrace();
			}
			return contactArray;
	
	}
	private String generateContactId() {
		 return UUID.randomUUID().toString();
	 }
	private Date dateToSql(String dob) {
		SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
		java.util.Date date;
		java.sql.Date sqlDate = null;
		try {
			date = sdf1.parse(dob);
			System.out.println("check  date "+date.getTime());
		 sqlDate = new java.sql.Date(date.getTime());
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return sqlDate;
		
	}
	private String sqlDateToStr(java.sql.Date sqlDate) {
		if(sqlDate!=null) {
			return sqlDate.toString();
		}
		return null;
		
		
	}

	public JSONArray getAllAddedGroups(ContactBean contactBean) {
		// TODO Auto-generated method stub
		
		System.out.println("in allUserContacts");
		PreparedStatement ps;
		JSONObject contactObj; 
		 JSONArray contactArray = new JSONArray(); 
		 
			try {
				ps = (PreparedStatement) con.prepareStatement("SELECT group_id from pbook_contact_grp_mapping_table where user_Id=? and contact_id=?");
				ps.setString(1, contactBean.getUserId());
				ps.setString(2, contactBean.getContactId());
				ResultSet rs=ps.executeQuery();
				while(rs.next()){
					contactObj = new JSONObject(); 
					 contactObj.put("group_id",rs.getString(1)); 
					 contactArray.put(contactObj);
				
				}
			} catch (SQLException e) {
				contactObj = new JSONObject(); 
				contactObj.put("ERROR","ERROR");
				contactArray.put(contactObj);
				e.printStackTrace();
			}
			return contactArray;
	
	
	}

	public boolean addGrpsToContact(String contactgrpsPairs,String userId) {
		
		ArrayList<String> groups=new ArrayList<String>();
		String contact="";
		boolean updatedContact=false;
			String[] splited = contactgrpsPairs.split(",");
			
			for(String s: splited) {
			//System.out.println(s);
			if(s.contains("groupId")){
				String sp[]=s.split(":");
				//groups.add();
				System.out.println(sp[1].substring(1, sp[1].length() - 1));
				groups.add(sp[1].substring(1, sp[1].length() - 1));
			}
			else {
				if(!updatedContact) {
					if(s.contains("contactId")){
						String sp[]=s.split(":");
						contact=sp[1].substring(1, sp[1].length() - 2);
						System.out.println(contact);
						updatedContact=true;
					}
				}
			}
			
			
			}
			
			
			PreparedStatement ps2;
			
			ps2 = (PreparedStatement) con.prepareStatement("select map_id from pbook_contact_grp_mapping_table where contact_id=? and user_id=?");
			ps2.setString(1,contact);
			ps2.setString(2, userId);
			ResultSet rs = ps2.executeQuery();
			if (!rs.next()) {
				PreparedStatement ps3;
				ps3=(PreparedStatement) con.prepareStatement("DELETE FROM pbook_contact_grp_mapping_table WHERE (map_id=?)");
				ps3.setString(1, rs.getString(1));
				int res1=ps3.executeUpdate();
				
			}
			
	    	
			for (String grpid:groups) {
				PreparedStatement ps;
				PreparedStatement ps1;
				try {
					String mapId=generateContactId();
					ps = (PreparedStatement) con.prepareStatement("INSERT INTO pbook_contact_grp_mapping_table VALUES (?,?,?,?)");
					ps.setString(1, mapId);
					ps.setString(2, groupedContactsBean.getContactId());
					ps.setString(3, groupedContactsBean.getGroupId());
					ps.setString(4, groupedContactsBean.getUserId());
					int rs1 = ps.executeUpdate();
					
				} catch (SQLException e) {
					System.out.println("exception" + e.getStackTrace());
					return  false;

				}

			}

		return false;
	}
}
